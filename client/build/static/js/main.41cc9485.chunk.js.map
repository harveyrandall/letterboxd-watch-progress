{"version":3,"sources":["components/Status.js","components/LineChart.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","boxClass","cssClass","className","message","value","ProgressBox","progress","Math","abs","Status","dayOfYear","watched","LineChart","chartRef","useRef","labels","Object","keys","data","watchedData","values","avgData","i","length","push","chartConfig","type","datasets","label","backgroundColor","borderColor","fill","options","responsive","showXLabels","title","display","text","tooltips","mode","intersect","hover","scales","xAxes","scaleLabel","labelString","fontSize","ticks","autoSkip","maxTicksLimit","yAxes","useEffect","current","Chart","id","ref","App","currentDay","now","Date","start","getFullYear","diff","getTimezoneOffset","ceil","useState","dayDiff","setDayDiff","totalWatched","setTotalWatched","setData","fetch","then","res","json","diary","total","reduce","a","b","max","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.41cc9485.chunk.js","sourcesContent":["import React from 'react';\n\nconst Status = ({dayOfYear, progress, watched}) => {\n    return (\n        <div className=\"status-row\">\n            <Box message=\"Day of the year\" value={dayOfYear} />\n            <Box message=\"Total films watched\" value={watched} />\n            <ProgressBox progress={progress} />\n        </div>\n    );\n}\n\nconst Box = (props) => {\n    let boxClass = props.cssClass ? `status-box ${props.cssClass}` : \"status-box\";\n    return (\n        <div className={boxClass}>\n            <p>{props.message}</p>\n            <h2>{props.value}</h2>\n        </div>\n    )\n}\n\nconst ProgressBox = ({progress}) => {\n    let message = \"Days behind\";\n    let cssClass = \"positive\";\n    if(progress > 0) {\n        message = \"Days ahead\";\n    } else if (progress < 0) {\n        cssClass = \"negative\";\n    } \n    return (\n        <Box message={message} value={Math.abs(progress)} cssClass={cssClass} />\n    )\n}\n\nexport default Status;","import React, {useEffect, useRef} from 'react';\nimport Chart from \"chart.js\";\n\nconst LineChart = (props) => {\n    const chartRef = useRef(null);\n    const labels = Object.keys(props.data);\n    const watchedData = Object.values(props.data);\n    let avgData = [];\n    for(let i=1; i <= labels.length; i++) {\n        avgData.push(i);\n    }\n    const chartConfig = {\n        type: \"line\",\n        data: {\n            labels: labels,\n            datasets: [\n                {\n                    label: \"Watched\",\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    borderColor: \"rgb(255, 99, 132)\",\n                    fill: false,\n                    data: watchedData\n                },\n                {\n                    label: \"One a day average\",\n                    backgroundColor: \"rgb(54, 162, 235)\",\n                    borderColor: \"rgb(54, 162, 235)\",\n                    fill: false,\n                    data: avgData\n                }\n            ]\n        },\n        options: {\n            responsive: true,\n            showXLabels: 10,\n            title: {\n                display: true,\n                text: \"Progress vs. Average\"\n            },\n            tooltips: {\n                mode: 'index',\n                intersect: false,\n            },\n            hover: {\n                mode: 'nearest',\n                intersect: true,\n            },\n            scales: {\n                xAxes: [{\n                    display: true,\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Day',\n                        fontSize: 16\n                    },\n                    type: 'time',\n                    ticks: {\n                        autoSkip: true,\n                        maxTicksLimit: 12\n                    }\n                }],\n                yAxes: [{\n                    display: true,\n                    scaleLabel: {\n                        display: true,\n                        labelString: \"Count\",\n                        fontSize: 16\n                    }\n                }]\n            }\n        }\n    }\n\n    useEffect(() => {\n        if(chartRef.current) {\n            const newChart = new Chart(chartRef.current, chartConfig);\n        }\n    }, [chartRef, chartConfig])\n\n    return (\n        <canvas id=\"watched\" ref={chartRef} />\n    )\n}\n\nexport default LineChart;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Status from './components/Status';\nimport LineChart from './components/LineChart';\n\nfunction App() {\n  const currentDay = dayOfYear();\n  const [dayDiff, setDayDiff] = useState(0);\n  const [totalWatched, setTotalWatched] = useState(0);\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    fetch('/api/daily').then(res => res.json()).then(data => {\n      setData(data.diary);\n      let total = Object.values(data.diary).reduce((a,b) => {\n        return Math.max(a,b);\n      })\n      setTotalWatched(total);\n      setDayDiff(total - currentDay);\n    });\n  }, [currentDay]);\n\n  return (\n    <div className=\"App\">\n      <Status\n        dayOfYear={currentDay}\n        progress={dayDiff}\n        watched={totalWatched}\n      />\n      <LineChart dayOfYear={currentDay} data={data} />\n    </div>\n  );\n}\n\nfunction dayOfYear() {\n  var now = new Date();\n  var start = new Date(now.getFullYear(), 0, 1);\n  var diff = (now - start) + ((start.getTimezoneOffset() - now.getTimezoneOffset()) * 1000 * 60);\n  var oneDay = 1000 * 60 * 60 * 24;\n  return Math.ceil(diff/oneDay)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}